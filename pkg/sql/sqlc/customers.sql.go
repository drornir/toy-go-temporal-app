// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: customers.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createCustomer = `-- name: CreateCustomer :one
INSERT INTO customers(name) VALUES (?1) RETURNING id, name
`

func (q *Queries) CreateCustomer(ctx context.Context, name sql.NullString) (Customer, error) {
	row := q.queryRow(ctx, q.createCustomerStmt, createCustomer, name)
	var i Customer
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const createOrder = `-- name: CreateOrder :one
INSERT INTO orders(customer_id, json_data) VALUES (?, ?) RETURNING id, customer_id, json_data
`

type CreateOrderParams struct {
	CustomerID int64  `db:"customer_id" json:"customer_id"`
	JsonData   string `db:"json_data" json:"json_data"`
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (Order, error) {
	row := q.queryRow(ctx, q.createOrderStmt, createOrder, arg.CustomerID, arg.JsonData)
	var i Order
	err := row.Scan(&i.ID, &i.CustomerID, &i.JsonData)
	return i, err
}
