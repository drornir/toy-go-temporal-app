// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package sqlc

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.addToyToCatalogStmt, err = db.PrepareContext(ctx, addToyToCatalog); err != nil {
		return nil, fmt.Errorf("error preparing query AddToyToCatalog: %w", err)
	}
	if q.createCustomerStmt, err = db.PrepareContext(ctx, createCustomer); err != nil {
		return nil, fmt.Errorf("error preparing query CreateCustomer: %w", err)
	}
	if q.createOrderStmt, err = db.PrepareContext(ctx, createOrder); err != nil {
		return nil, fmt.Errorf("error preparing query CreateOrder: %w", err)
	}
	if q.getToyByIDStmt, err = db.PrepareContext(ctx, getToyByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetToyByID: %w", err)
	}
	if q.getToysStmt, err = db.PrepareContext(ctx, getToys); err != nil {
		return nil, fmt.Errorf("error preparing query GetToys: %w", err)
	}
	if q.getToysByIdentifierStmt, err = db.PrepareContext(ctx, getToysByIdentifier); err != nil {
		return nil, fmt.Errorf("error preparing query GetToysByIdentifier: %w", err)
	}
	if q.takeToyFromInventoryStmt, err = db.PrepareContext(ctx, takeToyFromInventory); err != nil {
		return nil, fmt.Errorf("error preparing query TakeToyFromInventory: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.addToyToCatalogStmt != nil {
		if cerr := q.addToyToCatalogStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing addToyToCatalogStmt: %w", cerr)
		}
	}
	if q.createCustomerStmt != nil {
		if cerr := q.createCustomerStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createCustomerStmt: %w", cerr)
		}
	}
	if q.createOrderStmt != nil {
		if cerr := q.createOrderStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createOrderStmt: %w", cerr)
		}
	}
	if q.getToyByIDStmt != nil {
		if cerr := q.getToyByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getToyByIDStmt: %w", cerr)
		}
	}
	if q.getToysStmt != nil {
		if cerr := q.getToysStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getToysStmt: %w", cerr)
		}
	}
	if q.getToysByIdentifierStmt != nil {
		if cerr := q.getToysByIdentifierStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getToysByIdentifierStmt: %w", cerr)
		}
	}
	if q.takeToyFromInventoryStmt != nil {
		if cerr := q.takeToyFromInventoryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing takeToyFromInventoryStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                       DBTX
	tx                       *sql.Tx
	addToyToCatalogStmt      *sql.Stmt
	createCustomerStmt       *sql.Stmt
	createOrderStmt          *sql.Stmt
	getToyByIDStmt           *sql.Stmt
	getToysStmt              *sql.Stmt
	getToysByIdentifierStmt  *sql.Stmt
	takeToyFromInventoryStmt *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                       tx,
		tx:                       tx,
		addToyToCatalogStmt:      q.addToyToCatalogStmt,
		createCustomerStmt:       q.createCustomerStmt,
		createOrderStmt:          q.createOrderStmt,
		getToyByIDStmt:           q.getToyByIDStmt,
		getToysStmt:              q.getToysStmt,
		getToysByIdentifierStmt:  q.getToysByIdentifierStmt,
		takeToyFromInventoryStmt: q.takeToyFromInventoryStmt,
	}
}
